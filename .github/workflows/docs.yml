name: Documentation CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'  # Cache npm dependencies

      # Lint Markdown files using dedicated Action
      - name: Lint Markdown files
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: 'docs/*.md'
        continue-on-error: true

      # Set up Python for code extraction and validation
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Verify SQLite is available (pre-installed on ubuntu-latest)
      - name: Verify SQLite
        run: |
          sqlite3 --version
        continue-on-error: true

      # Extract and validate code blocks from Markdown
      - name: Extract and Validate Code Blocks
        run: |
          python << 'EOF'
          import re
          import subprocess
          import os
          import tempfile

          def extract_code_blocks(md_file, lang):
              with open(md_file, 'r') as f:
                  content = f.read()
              # Regex for ```lang ... ``` (handles 'bash', 'javascript', 'js', 'sql')
              pattern = rf'```(?:{lang})\s*\n(.*?)\n```'
              matches = re.findall(pattern, content, re.DOTALL)
              return '\n'.join(matches) if matches else ''

          # Temp dir for extracted files
          with tempfile.TemporaryDirectory() as tmpdir:
              # Extract Bash from part2
              bash_code = extract_code_blocks('docs/part2_bash_setup.md', 'bash')
              if bash_code:
                  bash_path = f'{tmpdir}/script.sh'
                  with open(bash_path, 'w') as f:
                      f.write(bash_code)
                  subprocess.run(['bash', '-n', bash_path], check=True)
                  print(f'Bash syntax OK: {bash_path}')

              # Extract JS from part3 (handles 'javascript' or 'js')
              js_code = extract_code_blocks('docs/part3_backend_code.md', 'javascript') or extract_code_blocks('docs/part3_backend_code.md', 'js')
              if js_code:
                  js_path = f'{tmpdir}/server.js'
                  with open(js_path, 'w') as f:
                      f.write(js_code)
                  subprocess.run(['node', '--check', js_path], check=True)
                  print(f'JS syntax OK: {js_path}')

              # Extract SQL from part4
              sql_code = extract_code_blocks('docs/part4_database_schema.md', 'sql')
              if sql_code:
                  sql_path = f'{tmpdir}/schema.sql'
                  with open(sql_path, 'w') as f:
                      f.write(sql_code)
                  db_path = f'{tmpdir}/test.db'
                  # Use shell=True to handle the '<' redirection properly
                  subprocess.run(f'sqlite3 {db_path} < {sql_path}', shell=True, check=True)
                  print(f'SQL validation OK: {sql_path}')
          EOF
        continue-on-error: true

      # Build Markdown to HTML
      - name: Build documentation
        run: |
          npm install -g marked
          mkdir -p public
          if [ -d "docs" ] && ls docs/*.md 1> /dev/null 2>&1; then
            for file in docs/*.md; do
              if [ -f "$file" ]; then
                base=$(basename "$file" .md)
                marked "$file" -o "public/$base.html" || echo "Warning: Failed to convert $file"
              fi
            done
          else
            echo "No docs folder or Markdown files found, skipping build"
          fi

      # Deploy to GitHub Pages (only on push to main)
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages
